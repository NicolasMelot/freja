#!/bin/bash

## Returns true if $1 is an integer or a decimal
is_number()
{
	printf %f\\n $1 > /dev/null 2>&1
}

## Returns true if all space-separated elements of $@ (regardless of double quotes") are an integers or decimal value
is_number_seq()
{
	local first="$1"
	shift

	if (( $# > 0 ))
	then

		is_number "$first"
		local head=$?
		is_number_seq $@
		local tail=$?

		return $(($head || $tail))
	else
		is_number "$first"
	fi
}

## Returns the numeric index of a string in a non-numeric sequence stored in a variable in the variables files
## If the string is a numeric value coming from a numeric sequence, then return the same numeric string
index()
{
	# $1 is variable name
	# $2 is variable value we want to get index of
	local variable=$1
	local value=$2

	## Load the content of variable files
	. ./variables
	local content=
	eval content=\('$'$variable\)

	local size=${#content[@]}

	if ! is_number_seq ${content[@]}
	then
		for i in `seq 0 $(($size - 1))`
		do
			if [ "$value" == "${content[$i]}" ]
			then
				echo $i
			fi
		done
	else
		echo $value
	fi
}

## returns the string value corresponding to the index in a variable from the variables file
value()
{
	local variable=$1
	local index=$2

	## Load the content of variables file
	. ./variables

	local var=
	eval var=\('$'$variable\)
	echo ${var[$index]}
}

## Transforms each value in the input sequence into its index equivalent according to variable sequence given in category
index_seq()
{
	local category=$1

	## Get the rest of arguments to parse
	shift
	local args="$@"
	eval args=\($args\)

	## Load the content of variables file
	. ./variables
	size=$#
	eval category='(${'$category'[@]})'

	for i in `seq 0 $(($size - 1))`
	do
		local variable=${category[$i]}
		echo -n `index $variable ${args[$i]}`\ 
	done
	echo
}
