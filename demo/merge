#!/bin/bash

#
# Merge all data found for experiments given as argument, create a column name as
# first argument and output the merged table to standard output
#
#
#
#


. ./settings
. ./variables
. ./resolver

column=$1
alias_column=""
shift

source=0;

first_input=$1

eval var=\('$'ref_$column\)
size_var=${#var[@]}

## Output data to file
echo -e $DATA_BEGIN

while (( $# > 0 ))
do
	index=`index $column $1`
	
	while read i
	do
		input_dir=$i
		## Process this argument only if it is a directory
		if [ -d $input_dir ]
		then
			echo % From $input_dir
			ls $input_dir/${output_base}_*_{$output_success,$output_failure}* 2> /dev/null | sort -V | xargs cat | tr \\\t ' ' | tr -s ' ' | sed -e "s/\(.*\)/$index \1/g"
		fi

	done < <(ls -d $1/*)

	shift
done

## Load the new references
if [ -f references ]
then
. ./references
fi

echo -e $DATA_END

## Output column names to file
echo -e $COLUMNS_BEGIN 
echo $column ${compile[@]}\ ${run[@]}\ $output_columns | tr \\\t ' ' | tr -s ' ' | tr ' ' \\\n | while read line; do echo -en \'$line\'\ | tr _ ' ' | tr '~' '_'; done
echo -e $COLUMNS_END

echo -e $SYMB_BEGIN
variable="$column ${compile[@]} ${run[@]} $output_columns"
eval variable=\($variable\)
variable_size=${#variable[@]}

seq 0 $(($variable_size - 1)) | tr ' ' \\\n | while read i
do
	symb=symb_${variable[$i]}
	eval symb=\('$'$symb\)
	symb_size=${#symb[@]}

	ref=ref_${variable[$i]}
	eval ref=\('$'$ref\)
	ref_size=${#ref[@]}

	if (( $symb_size > 0 )) && (( $ref_size > 0 ))
	then
		## If it has an alias, then generate a row with alias values
		echo -n "{"
		for i in ${symb[@]}
		do
			echo -n \'$i\'\  
		done
		echo -n "} "
	else
		## OK there was no symbol collected, but maybe there are symbols anyway
		## for run-generated columns
		alias=alias_${variable[$i]}
		eval alias=\('$'$alias\)
		alias_size=${#alias[@]}

		if (( $alias_size > 0 ))
		then
		echo -n "{"
			for i in ${alias[@]}
			do
				echo -n \'$i\'\  
			done
			echo -n "} "			
		else
			## Otherwise...
			values=${variable[$i]}
			eval values=\('$'$values\)

			if ! is_number_seq ${values[@]}
			then
				## If it is NOT a numeric column, then generate a row with non-numeric raw values
				echo -n "{"
				for i in ${values[@]}
				do
					echo -n \'$i\'\  
				done
				echo -n "} "
			else
				## Else generate an empty row
				echo -n '{} '
			fi
		fi
	fi
done | tr _ ' ' | tr '~' _
echo -e $SYMB_END

## Output value reference to file
echo -e $REF_BEGIN
variable="$column ${compile[@]} ${run[@]} $output_columns"
eval variable=\($variable\)
variable_size=${#variable[@]}

seq 0 $(($variable_size - 1)) | tr ' ' \\\n | while read i
do
	ref=ref_${variable[$i]}
	eval ref=\('$'$ref\)
	ref_size=${#ref[@]}

	if (( $ref_size > 0 ))
	then
		echo -n "{"
		for i in ${ref[@]}
		do
			echo -n \'$i\'\  
		done
		echo -n "} "
	else
		## Otherwise...
		values=${variable[$i]}
		eval values=\('$'$values\)

		if ! is_number_seq ${values[@]}
		then
			## If it is NOT a numeric column, then generate a row with non-numeric raw values
			echo -n "{"
			for i in ${values[@]}
			do
				echo -n \'$i\'\  
			done
			echo -n "} "
		else
			## Else generate an empty row
			echo -n '{} '
		fi
	fi
done
echo -e $REF_END
exit 0
